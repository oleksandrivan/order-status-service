/*
 * This file is generated by jOOQ.
 */
package com.uoc.jooq.tables


import com.uoc.jooq.Db
import com.uoc.jooq.enums.OrderStatus
import com.uoc.jooq.indexes.ORDER_CUSTOMERID
import com.uoc.jooq.indexes.ORDER_SHIPPINGADDRESS
import com.uoc.jooq.keys.KEY_ORDER_PRIMARY
import com.uoc.jooq.keys.ORDERITEM_IBFK_1
import com.uoc.jooq.keys.ORDER_IBFK_1
import com.uoc.jooq.keys.ORDER_IBFK_2
import com.uoc.jooq.tables.Address.AddressPath
import com.uoc.jooq.tables.Customer.CustomerPath
import com.uoc.jooq.tables.Orderitem.OrderitemPath
import com.uoc.jooq.tables.records.OrderRecord

import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Order(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, OrderRecord>?,
    parentPath: InverseForeignKey<out Record, OrderRecord>?,
    aliased: Table<OrderRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<OrderRecord>(
    alias,
    Db.DB,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>db.Order</code>
         */
        val ORDER: Order = Order()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OrderRecord> = OrderRecord::class.java

    /**
     * The column <code>db.Order.id</code>.
     */
    val ID: TableField<OrderRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>db.Order.customerId</code>.
     */
    val CUSTOMERID: TableField<OrderRecord, Int?> = createField(DSL.name("customerId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>db.Order.shippingAddress</code>.
     */
    val SHIPPINGADDRESS: TableField<OrderRecord, Int?> = createField(DSL.name("shippingAddress"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>db.Order.status</code>.
     */
    val STATUS: TableField<OrderRecord, OrderStatus?> = createField(DSL.name("status"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("CREATED", SQLDataType.VARCHAR)).asEnumDataType(OrderStatus::class.java), this, "")

    /**
     * The column <code>db.Order.createdAt</code>.
     */
    val CREATEDAT: TableField<OrderRecord, LocalDateTime?> = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>db.Order.updatedAt</code>.
     */
    val UPDATEDAT: TableField<OrderRecord, LocalDateTime?> = createField(DSL.name("updatedAt"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<OrderRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<OrderRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<OrderRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>db.Order</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>db.Order</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>db.Order</code> table reference
     */
    constructor(): this(DSL.name("Order"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, OrderRecord>?, parentPath: InverseForeignKey<out Record, OrderRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, ORDER, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class OrderPath : Order, Path<OrderRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, OrderRecord>?, parentPath: InverseForeignKey<out Record, OrderRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<OrderRecord>): super(alias, aliased)
        override fun `as`(alias: String): OrderPath = OrderPath(DSL.name(alias), this)
        override fun `as`(alias: Name): OrderPath = OrderPath(alias, this)
        override fun `as`(alias: Table<*>): OrderPath = OrderPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Db.DB
    override fun getIndexes(): List<Index> = listOf(ORDER_CUSTOMERID, ORDER_SHIPPINGADDRESS)
    override fun getPrimaryKey(): UniqueKey<OrderRecord> = KEY_ORDER_PRIMARY
    override fun getReferences(): List<ForeignKey<OrderRecord, *>> = listOf(ORDER_IBFK_1, ORDER_IBFK_2)

    private lateinit var _customer: CustomerPath

    /**
     * Get the implicit join path to the <code>db.Customer</code> table.
     */
    fun customer(): CustomerPath {
        if (!this::_customer.isInitialized)
            _customer = CustomerPath(this, ORDER_IBFK_1, null)

        return _customer;
    }

    val customer: CustomerPath
        get(): CustomerPath = customer()

    private lateinit var _address: AddressPath

    /**
     * Get the implicit join path to the <code>db.Address</code> table.
     */
    fun address(): AddressPath {
        if (!this::_address.isInitialized)
            _address = AddressPath(this, ORDER_IBFK_2, null)

        return _address;
    }

    val address: AddressPath
        get(): AddressPath = address()

    private lateinit var _orderitem: OrderitemPath

    /**
     * Get the implicit to-many join path to the <code>db.OrderItem</code> table
     */
    fun orderitem(): OrderitemPath {
        if (!this::_orderitem.isInitialized)
            _orderitem = OrderitemPath(this, null, ORDERITEM_IBFK_1.inverseKey)

        return _orderitem;
    }

    val orderitem: OrderitemPath
        get(): OrderitemPath = orderitem()
    override fun `as`(alias: String): Order = Order(DSL.name(alias), this)
    override fun `as`(alias: Name): Order = Order(alias, this)
    override fun `as`(alias: Table<*>): Order = Order(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Order = Order(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Order = Order(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Order = Order(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Order = Order(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Order = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Order = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Order = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Order = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Order = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Order = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Order = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Order = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Order = where(DSL.notExists(select))
}
