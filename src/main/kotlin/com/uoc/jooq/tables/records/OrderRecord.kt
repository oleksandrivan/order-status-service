/*
 * This file is generated by jOOQ.
 */
package com.uoc.jooq.tables.records


import com.uoc.jooq.enums.OrderStatus
import com.uoc.jooq.tables.Order

import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrderRecord() : UpdatableRecordImpl<OrderRecord>(Order.ORDER) {

    open var id: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var customerid: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var shippingaddress: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var status: OrderStatus?
        set(value): Unit = set(3, value)
        get(): OrderStatus? = get(3) as OrderStatus?

    open var createdat: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    open var updatedat: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    /**
     * Create a detached, initialised OrderRecord
     */
    constructor(id: String? = null, customerid: Int? = null, shippingaddress: Int? = null, status: OrderStatus? = null, createdat: LocalDateTime? = null, updatedat: LocalDateTime? = null): this() {
        this.id = id
        this.customerid = customerid
        this.shippingaddress = shippingaddress
        this.status = status
        this.createdat = createdat
        this.updatedat = updatedat
        resetChangedOnNotNull()
    }
}
